AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  VPCStackName:
    Type: String
  ResourcesStackName:
    Type: String
  TeamName:
    Type: String
  ServiceName:
    Type: String
    Default: 'yocto'
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: 'felixb/yocto-httpd'
    Description: The url of a docker image that contains the application process that
      will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU. Max is 10240.
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  Path:
    Type: String
    Default: "/yocto/*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.

Resources:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'yocto'
      RetentionInDays: 3

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  # Counterpart in ec2 is the launch configuration
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !ImportValue {"Fn::Sub": "${ResourcesStackName}:ECSTaskExecutionRole"}
      ContainerDefinitions:
      - Name: !Ref 'ServiceName'
        Cpu: !Ref 'ContainerCpu'
        Memory: !Ref 'ContainerMemory'
        Image: !Ref 'ImageUrl'
        PortMappings:
        -
          ContainerPort: !Ref 'ContainerPort'
          HostPort: !Ref 'ContainerPort'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: 'eu-central-1'
            awslogs-stream-prefix: 'yocto'


  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !ImportValue {"Fn::Sub": "${ResourcesStackName}:ClusterName"}
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !ImportValue {"Fn::Sub": "${ResourcesStackName}:SecurityGroup"}
          Subnets:
          - !ImportValue {"Fn::Sub": "${VPCStackName}-subnet-1-public-id"}
          - !ImportValue {"Fn::Sub": "${VPCStackName}-subnet-2-public-id"}
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
      - ContainerName: !Ref 'ServiceName'
        ContainerPort: !Ref 'ContainerPort'
        TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: '/status'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ServiceName'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue {"Fn::Sub": "${VPCStackName}-vpc-id"}


  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'TargetGroup'
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values: [!Ref 'Path']
      ListenerArn: !ImportValue {"Fn::Sub": "${VPCStackName}-ListenerId"}
      Priority: !Ref 'Priority'
#
#  ScalableTarget:
#    Type: AWS::ApplicationAutoScaling::ScalableTarget
#    Properties:
#      MaxCapacity: 3
#      MinCapacity: 1
#      ResourceId: !Join [ "/", [ "service", !ImportValue {"Fn::Sub": "${StackName}:ClusterName"}, !GetAtt Service.Name ] ]
#      RoleARN:
#        Fn::ImportValue:
#          !Join [':', [!Ref 'StackName', 'ApplicationAutoScalingRole']]
#      ScalableDimension: ecs:service:DesiredCount
#      ServiceNamespace: ecs
#
#  AutoScalingPolicy:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: ECSScalingBlogPolicy
#      PolicyType: TargetTrackingScaling
#      ScalingTargetId:
#        Ref: ScalableTarget
#      ScalableDimension: ecs:service:DesiredCount
#      ServiceNamespace: ecs
#      TargetTrackingScalingPolicyConfiguration:
#        TargetValue: 10.0
#        ##Time waiting between adding new instances
#        ScaleOutCooldown: 20
#        ##Time waiting between removing old instances
#        ScaleInCooldown: 60
#        PredefinedMetricSpecification:
#          PredefinedMetricType: ALBRequestCountPerTarget
#          ResourceLabel: !Join [ "/", [ "app", "order-develop-alb", "816c2c8e8f042ece", "targetgroup", "checkout-template-fargate", "1c94066ec3fdf1f2"] ]