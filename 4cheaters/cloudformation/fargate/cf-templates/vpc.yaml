---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  TeamName:
    Type: String
  DnsRootDomain:
    Type: String
  VpcCidr:
    Type: String
  VpcSubnet1Cidr:
    Type: String
  VpcSubnet2Cidr:
    Type: String
  VpcSubnet3Cidr:
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${TeamName}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${TeamName}-route-table-public"

  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1Public:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref VpcSubnet1Cidr
      AvailabilityZone: "eu-central-1a"
      Tags:
      - Key: Name
        Value: !Sub "${TeamName}-public-1"
  RouteTableAssociation1Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1Public
      RouteTableId: !Ref RouteTable

  Subnet2Public:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref VpcSubnet2Cidr
      AvailabilityZone: "eu-central-1b"
      Tags:
      - Key: Name
        Value: !Sub "${TeamName}-public-2"
  RouteTableAssociation2Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2Public
      RouteTableId: !Ref RouteTable

  Subnet3Public:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref VpcSubnet3Cidr
      AvailabilityZone: "eu-central-1c"
      Tags:
      - Key: Name
        Value: !Sub "${TeamName}-public-3"
  RouteTableAssociation3Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3Public
      RouteTableId: !Ref RouteTable

  # ALB settings
  SecurityGroupALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access via https
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: "0.0.0.0/0"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "ALB-${TeamName}"
      Subnets:
      - !Ref Subnet1Public
      - !Ref Subnet2Public
      - !Ref Subnet3Public
      SecurityGroups:
      - !Ref SecurityGroupALB

  DefaultTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: "5"
      HealthCheckPath: "/health"
      HealthCheckPort: "8443"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: "2"
      HealthyThresholdCount: "2"
      Matcher:
        HttpCode: "200"
      Name: !Sub "${TeamName}-default-targetgroup"
      Port: "8443"
      Protocol: "HTTP"
      UnhealthyThresholdCount: "2"
      VpcId: !Ref VPC

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: "80"
      Protocol: "HTTP"

Outputs:
  VPCId:
    Export:
      Name: !Sub "${AWS::StackName}-vpc-id"
    Value: !Ref VPC
  VPCCidr:
      Export:
        Name: !Sub "${AWS::StackName}-vpc-cidr"
      Value: !Ref VpcCidr
  Subnet1PublicId:
    Export:
      Name: !Sub "${AWS::StackName}-subnet-1-public-id"
    Value: !Ref Subnet1Public
  Subnet2PublicId:
    Export:
      Name: !Sub "${AWS::StackName}-subnet-2-public-id"
    Value: !Ref Subnet2Public
  Subnet3PublicId:
    Export:
      Name: !Sub "${AWS::StackName}-subnet-3-public-id"
    Value: !Ref Subnet3Public
  LoadbalancerSecurityGroupId:
    Value: !Ref SecurityGroupALB
    Export:
      Name: !Sub "${AWS::StackName}-alb-sg-id"
  ListenerId:
    Value: !Ref Listener
    Export:
      Name: !Sub "${AWS::StackName}-ListenerId"