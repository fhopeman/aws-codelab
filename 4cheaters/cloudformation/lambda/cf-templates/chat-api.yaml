---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  TeamName:
    Type: String

Resources:

  ChatApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "chat-api-${TeamName}"
      Description: "API used for chatting"
      FailOnWarnings : "true"

  ChatApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatApi
      ParentId:
        Fn::GetAtt: [ChatApi, "RootResourceId"]
      PathPart: "chat"

  ###### Read chat ######

  LambdaReadChatPermissionForApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !ImportValue {"Fn::Sub": "lambda-chat-${TeamName}-read-LambdaReadChatArn"}
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join: ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ChatApi"}, "/*"]]

  ReadChatRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri:
          Fn::Join: ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", !ImportValue {"Fn::Sub": "lambda-chat-${TeamName}-read-LambdaReadChatArn"}, "/invocations"]]
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ChatApiResource
      RestApiId: !Ref ChatApi
      MethodResponses:
        - StatusCode: 200

  ###### Write chat ######

  LambdaWriteChatPermissionForApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !ImportValue {"Fn::Sub": "lambda-chat-${TeamName}-write-LambdaWriteChatArn"}
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join: ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ChatApi"}, "/*"]]

  WriteChatRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri:
          Fn::Join: ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", !ImportValue {"Fn::Sub": "lambda-chat-${TeamName}-write-LambdaWriteChatArn"}, "/invocations"]]
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          "application/json": $input.body
      ResourceId: !Ref ChatApiResource
      RestApiId: !Ref ChatApi
      MethodResponses:
        - StatusCode: 200

  ###### Api versions ######

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ WriteChatRequest, ReadChatRequest ]
    Properties:
      RestApiId: !Ref ChatApi
      StageName: "TEST"

  ChatApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          ResourcePath: "/*"
      "RestApiId": !Ref ChatApi
      "StageName": "LATEST"

  ###### CloudWatch policy ######

  ApiGatewayCloudWatchLogsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ApiGatewayLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                  - "logs:FilterLogEvents"
                Resource: "*"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt: ["ApiGatewayCloudWatchLogsRole", "Arn"]
