---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VPCStackName:
    Type: String
  TeamName:
    Type: String
  ImageId:
    Type: String
  KeyName:
    Type: String

Resources:

  ###### EC2 instance ######

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow access via http"
      VpcId: !ImportValue {"Fn::Sub": "${VPCStackName}-vpc-id"}
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${TeamName}-yocto"

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ECRpull
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
                - ecr:BatchCheckLayerAvailability
                - ecr:BatchGetImage
                - ecr:GetDownloadUrlForLayer
                - ecr:GetAuthorizationToken
              Resource:
                - "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref Role

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: "Installs docker as service"
      AWS::CloudFormation::Init:
        configSets:
            default:
              - docker
        docker:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !Ref ImageId
      InstanceType: "t2.nano"
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64": !Sub
          |
            #!/bin/bash -xe

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
            docker run -dp 8080:8080 felixb/yocto-httpd

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
      SecurityGroups:
        - !Ref SecurityGroup

  ###### ELB ######

  SecurityGroupELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow access via http"
      VpcId: !ImportValue {"Fn::Sub": "${VPCStackName}-vpc-id"}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${TeamName}-yocto-elb"

  ###### auto scaling group ######

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: PT1M
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier:
      - !ImportValue {"Fn::Sub": "${VPCStackName}-subnet-1-public-id"}
      - !ImportValue {"Fn::Sub": "${VPCStackName}-subnet-2-public-id"}
      - !ImportValue {"Fn::Sub": "${VPCStackName}-subnet-3-public-id"}
      LaunchConfigurationName: !Ref LaunchConfiguration
      HealthCheckType: "ELB"
      HealthCheckGracePeriod: "120"
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "2"
      Tags:
        - Key: Name
          Value: !Sub "${TeamName}-yocto"
          PropagateAtLaunch: true
