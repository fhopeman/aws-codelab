---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  TeamName:
    Type: String

Resources:

  LambdaReadChatRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "ApiGatewayLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: "*"

  LambdaReadChat:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "chat-read-${TeamName}"
      Description: "A read chat function"
      Handler: "index.handler"
      Role:
        Fn::GetAtt: [LambdaReadChatRole, "Arn"]
      Runtime: "nodejs6.10"
      MemorySize: "128"
      Timeout: "2"
      Code:
        "ZipFile": !Sub >
          var AWS = require('aws-sdk');
          var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

          exports.handler = (event, context, callback) => {
            console.log("try to read chat");

          };

Outputs:

  LambdaReadChatArn:
    Export:
      Name: !Sub "${AWS::StackName}-LambdaReadChatArn"
    Value:
      Fn::GetAtt: [LambdaReadChat, "Arn"]
